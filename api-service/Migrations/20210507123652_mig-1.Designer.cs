// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api_service.Data;

namespace api_service.Migrations
{
    [DbContext(typeof(EFContext))]
    [Migration("20210507123652_mig-1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("api_service.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 89, 238, 82, 191, 183, 235, 198, 188, 127, 225, 118, 208, 18, 95, 251, 4, 228, 106, 79, 168, 236, 162, 87, 159, 177, 123, 71, 172, 128, 250, 128, 189, 86, 46, 210, 202, 157, 58, 30, 227, 154, 156, 121, 171, 160, 220, 62, 111, 75, 102, 114, 50, 19, 53, 6, 254, 2, 250, 238, 110, 121, 29, 119, 228 },
                            PasswordSalt = new byte[] { 232, 158, 23, 68, 243, 208, 35, 163, 251, 109, 56, 215, 189, 209, 206, 113, 202, 156, 138, 228, 41, 247, 71, 200, 63, 164, 77, 119, 177, 49, 185, 98, 242, 134, 59, 236, 154, 159, 138, 210, 37, 237, 99, 160, 214, 94, 56, 225, 63, 78, 68, 25, 142, 11, 73, 92, 181, 101, 0, 58, 189, 214, 148, 255, 54, 1, 49, 191, 62, 54, 104, 16, 197, 177, 121, 233, 227, 76, 81, 35, 1, 220, 131, 196, 189, 17, 251, 190, 227, 57, 58, 193, 147, 34, 157, 223, 210, 192, 64, 99, 227, 85, 0, 177, 19, 97, 240, 253, 57, 10, 140, 199, 114, 4, 97, 67, 133, 59, 239, 214, 126, 17, 173, 209, 44, 5, 186, 126 },
                            Username = "admin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
